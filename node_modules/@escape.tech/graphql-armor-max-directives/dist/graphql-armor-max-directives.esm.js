import { GraphQLError, Kind } from 'graphql';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

const maxDirectivesDefaultOptions = {
  n: 50
};

class MaxDirectivesVisitor {
  constructor(context, onError, options) {
    _defineProperty(this, "OperationDefinition", void 0);

    _defineProperty(this, "context", void 0);

    _defineProperty(this, "config", void 0);

    _defineProperty(this, "onError", void 0);

    this.context = context;
    this.config = Object.assign({}, maxDirectivesDefaultOptions, ...Object.entries(options ?? {}).map(([k, v]) => v === undefined ? {} : {
      [k]: v
    }));
    this.onError = onError;
    this.OperationDefinition = {
      enter: this.onOperationDefinitionEnter
    };
  }

  onOperationDefinitionEnter(operation) {
    const directives = this.countDirectives(operation);

    if (directives > this.config.n) {
      this.onError('Too many directives.');
    }
  }

  countDirectives(node) {
    let directives = 0;

    if (node.directives) {
      directives += node.directives.length;
    }

    if ('selectionSet' in node && node.selectionSet) {
      for (let child of node.selectionSet.selections) {
        directives += this.countDirectives(child);
      }
    }

    if (node.kind == Kind.FRAGMENT_SPREAD) {
      const fragment = this.context.getFragment(node.name.value);

      if (fragment) {
        directives += this.countDirectives(fragment);
      }
    }

    return directives;
  }

}

const maxDirectivesRule = (onError, options) => context => new MaxDirectivesVisitor(context, onError, options);

const maxDirectivesPlugin = options => {
  return {
    onValidate({
      addValidationRule
    }) {
      addValidationRule(maxDirectivesRule(msg => {
        throw new GraphQLError(msg);
      }, options));
    }

  };
};

export { maxDirectivesPlugin, maxDirectivesRule };
