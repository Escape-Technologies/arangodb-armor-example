import type { Plugin } from '@envelop/core';
import { OperationDefinitionNode, ValidationContext } from 'graphql';
declare type CostLimitOptions = {
    maxCost?: number;
    objectCost?: number;
    scalarCost?: number;
    depthCostFactor?: number;
    ignoreIntrospection?: boolean;
};
declare class CostLimitVisitor {
    readonly OperationDefinition: Record<string, any>;
    private readonly context;
    private readonly config;
    private readonly onError;
    constructor(context: ValidationContext, onError: (string: any) => any, options?: CostLimitOptions);
    onOperationDefinitionEnter(operation: OperationDefinitionNode): void;
    private computeComplexity;
}
declare const costLimitRule: (errorHandler: (msg: string) => void, options?: CostLimitOptions) => (context: ValidationContext) => CostLimitVisitor;
declare const costLimitPlugin: (options?: CostLimitOptions) => Plugin;
export { costLimitRule, CostLimitOptions, costLimitPlugin };
