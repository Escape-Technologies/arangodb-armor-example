'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var graphqlArmorBlockFieldSuggestions = require('@escape.tech/graphql-armor-block-field-suggestions');
var graphqlArmorCharacterLimit = require('@escape.tech/graphql-armor-character-limit');
var graphql = require('graphql');
var graphqlArmorCostLimit = require('@escape.tech/graphql-armor-cost-limit');
var graphqlArmorMaxAliases = require('@escape.tech/graphql-armor-max-aliases');
var graphqlArmorMaxDepth = require('@escape.tech/graphql-armor-max-depth');
var graphqlArmorMaxDirectives = require('@escape.tech/graphql-armor-max-directives');

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

class ApolloProtection {
  constructor(config) {
    _defineProperty(this, "config", void 0);

    _defineProperty(this, "enabledByDefault", true);

    this.config = config;
  }

}

const plugin$1 = ({
  mask
}) => {
  return {
    async requestDidStart() {
      return {
        async didEncounterErrors({
          errors
        }) {
          for (const error of errors) {
            error.message = error.message.replace(/Did you mean ".+"/g, mask);
          }
        }

      };
    }

  };
};

class ApolloBlockFieldSuggestionProtection extends ApolloProtection {
  get isEnabled() {
    var _this$config$blockFie;

    if (!this.config.blockFieldSuggestion) {
      return this.enabledByDefault;
    }

    return (_this$config$blockFie = this.config.blockFieldSuggestion.enabled) !== null && _this$config$blockFie !== void 0 ? _this$config$blockFie : this.enabledByDefault;
  }

  protect() {
    var _this$config$blockFie2;

    return {
      plugins: [plugin$1((_this$config$blockFie2 = this.config.blockFieldSuggestion) !== null && _this$config$blockFie2 !== void 0 ? _this$config$blockFie2 : graphqlArmorBlockFieldSuggestions.blockFieldSuggestionsDefaultOptions)]
    };
  }

}

const plugin = ({
  maxLength
}) => {
  return {
    async requestDidStart(context) {
      if (!context.request.query) return;

      if (context.request.query.length > maxLength) {
        throw new graphql.GraphQLError('Query is too large.', {
          extensions: {
            code: 'BAD_USER_INPUT'
          }
        });
      }
    }

  };
};

class ApolloCharacterLimitProtection extends ApolloProtection {
  get isEnabled() {
    var _this$config$characte;

    if (!this.config.characterLimit) {
      return this.enabledByDefault;
    }

    return (_this$config$characte = this.config.characterLimit.enabled) !== null && _this$config$characte !== void 0 ? _this$config$characte : this.enabledByDefault;
  }

  protect() {
    var _this$config$characte2, _this$config$characte3;

    return {
      plugins: [plugin({
        maxLength: (_this$config$characte2 = (_this$config$characte3 = this.config.characterLimit) === null || _this$config$characte3 === void 0 ? void 0 : _this$config$characte3.maxLength) !== null && _this$config$characte2 !== void 0 ? _this$config$characte2 : graphqlArmorCharacterLimit.characterLimitDefaultOptions.maxLength
      })]
    };
  }

}

class ApolloCostLimitProtection extends ApolloProtection {
  get isEnabled() {
    var _this$config$costLimi;

    if (!this.config.costLimit) {
      return this.enabledByDefault;
    }

    return (_this$config$costLimi = this.config.costLimit.enabled) !== null && _this$config$costLimi !== void 0 ? _this$config$costLimi : this.enabledByDefault;
  }

  protect() {
    return {
      validationRules: [graphqlArmorCostLimit.costLimitRule(message => {
        throw new graphql.GraphQLError(message, {
          extensions: {
            code: 'BAD_USER_INPUT'
          }
        });
      }, this.config.costLimit)]
    };
  }

}

class ApolloMaxAliasesProtection extends ApolloProtection {
  get isEnabled() {
    var _this$config$maxAlias;

    if (!this.config.maxAliases) {
      return this.enabledByDefault;
    }

    return (_this$config$maxAlias = this.config.maxAliases.enabled) !== null && _this$config$maxAlias !== void 0 ? _this$config$maxAlias : this.enabledByDefault;
  }

  protect() {
    return {
      validationRules: [graphqlArmorMaxAliases.maxAliasesRule(message => {
        throw new graphql.GraphQLError(message, {
          extensions: {
            code: 'BAD_USER_INPUT'
          }
        });
      }, this.config.maxAliases)]
    };
  }

}

class ApolloMaxDepthProtection extends ApolloProtection {
  get isEnabled() {
    var _this$config$maxDepth;

    if (!this.config.maxDepth) {
      return this.enabledByDefault;
    }

    return (_this$config$maxDepth = this.config.maxDepth.enabled) !== null && _this$config$maxDepth !== void 0 ? _this$config$maxDepth : this.enabledByDefault;
  }

  protect() {
    return {
      validationRules: [graphqlArmorMaxDepth.maxDepthRule(message => {
        throw new graphql.GraphQLError(message, {
          extensions: {
            code: 'BAD_USER_INPUT'
          }
        });
      }, this.config.maxDepth)]
    };
  }

}

class ApolloMaxDirectivesProtection extends ApolloProtection {
  get isEnabled() {
    var _this$config$maxDirec;

    if (!this.config.maxDirectives) {
      return this.enabledByDefault;
    }

    return (_this$config$maxDirec = this.config.maxDirectives.enabled) !== null && _this$config$maxDirec !== void 0 ? _this$config$maxDirec : this.enabledByDefault;
  }

  protect() {
    return {
      validationRules: [graphqlArmorMaxDirectives.maxDirectivesRule(message => {
        throw new graphql.GraphQLError(message, {
          extensions: {
            code: 'BAD_USER_INPUT'
          }
        });
      }, this.config.maxDirectives)]
    };
  }

}

class ApolloArmor {
  constructor(config = {}) {
    _defineProperty(this, "protections", void 0);

    this.protections = [new ApolloBlockFieldSuggestionProtection(config), new ApolloCharacterLimitProtection(config), new ApolloCostLimitProtection(config), new ApolloMaxAliasesProtection(config), new ApolloMaxDirectivesProtection(config), new ApolloMaxDepthProtection(config)];
  }

  protect() {
    let plugins = [];
    let validationRules = [];

    for (const protection of this.protections) {
      if (protection.isEnabled) {
        const {
          plugins: newPlugins,
          validationRules: newValidationRules
        } = protection.protect();
        plugins = [...plugins, ...(newPlugins || [])];
        validationRules = [...validationRules, ...(newValidationRules || [])];
      }
    }

    return {
      plugins,
      validationRules,
      allowBatchedHttpRequests: false,
      debug: false
    };
  }

}

class EnvelopProtection {
  constructor(config) {
    _defineProperty(this, "config", void 0);

    _defineProperty(this, "enabledByDefault", true);

    this.config = config;
  }

}

class EnvelopBlockFieldSuggestionProtection extends EnvelopProtection {
  get isEnabled() {
    var _this$config$blockFie;

    if (!this.config.blockFieldSuggestion) {
      return this.enabledByDefault;
    }

    return (_this$config$blockFie = this.config.blockFieldSuggestion.enabled) !== null && _this$config$blockFie !== void 0 ? _this$config$blockFie : this.enabledByDefault;
  }

  protect() {
    return {
      plugins: [graphqlArmorBlockFieldSuggestions.blockFieldSuggestionsPlugin(this.config.blockFieldSuggestion)]
    };
  }

}

class EnvelopCharacterLimitProtection extends EnvelopProtection {
  get isEnabled() {
    var _this$config$characte;

    if (!this.config.characterLimit) {
      return this.enabledByDefault;
    }

    return (_this$config$characte = this.config.characterLimit.enabled) !== null && _this$config$characte !== void 0 ? _this$config$characte : this.enabledByDefault;
  }

  protect() {
    return {
      plugins: [graphqlArmorCharacterLimit.characterLimitPlugin(this.config.characterLimit)]
    };
  }

}

class EnvelopCostLimitProtection extends EnvelopProtection {
  get isEnabled() {
    var _this$config$costLimi;

    if (!this.config.costLimit) {
      return this.enabledByDefault;
    }

    return (_this$config$costLimi = this.config.costLimit.enabled) !== null && _this$config$costLimi !== void 0 ? _this$config$costLimi : this.enabledByDefault;
  }

  protect() {
    return {
      plugins: [graphqlArmorCostLimit.costLimitPlugin(this.config.costLimit)]
    };
  }

}

class EnvelopMaxAliasesProtection extends EnvelopProtection {
  get isEnabled() {
    var _this$config$maxAlias;

    if (!this.config.maxAliases) {
      return this.enabledByDefault;
    }

    return (_this$config$maxAlias = this.config.maxAliases.enabled) !== null && _this$config$maxAlias !== void 0 ? _this$config$maxAlias : this.enabledByDefault;
  }

  protect() {
    return {
      plugins: [graphqlArmorMaxAliases.maxAliasesPlugin(this.config.maxAliases)]
    };
  }

}

class EnvelopMaxDepthProtection extends EnvelopProtection {
  get isEnabled() {
    var _this$config$maxDepth;

    if (!this.config.maxDepth) {
      return this.enabledByDefault;
    }

    return (_this$config$maxDepth = this.config.maxDepth.enabled) !== null && _this$config$maxDepth !== void 0 ? _this$config$maxDepth : this.enabledByDefault;
  }

  protect() {
    return {
      plugins: [graphqlArmorMaxDepth.maxDepthPlugin(this.config.maxDepth)]
    };
  }

}

class EnvelopMaxDirectivesProtection extends EnvelopProtection {
  get isEnabled() {
    var _this$config$maxDirec;

    if (!this.config.maxDirectives) {
      return this.enabledByDefault;
    }

    return (_this$config$maxDirec = this.config.maxDirectives.enabled) !== null && _this$config$maxDirec !== void 0 ? _this$config$maxDirec : this.enabledByDefault;
  }

  protect() {
    return {
      plugins: [graphqlArmorMaxDirectives.maxDirectivesPlugin(this.config.maxDirectives)]
    };
  }

}

const EnvelopArmorPlugin = config => {
  const armor = new EnvelopArmor(config);
  const enhancements = armor.protect();
  return {
    onPluginInit({
      addPlugin
    }) {
      for (const plugin of enhancements.plugins) {
        addPlugin(plugin);
      }
    }

  };
};
class EnvelopArmor {
  constructor(config = {}) {
    _defineProperty(this, "protections", void 0);

    this.protections = [new EnvelopBlockFieldSuggestionProtection(config), new EnvelopCharacterLimitProtection(config), new EnvelopMaxDirectivesProtection(config), new EnvelopMaxAliasesProtection(config), new EnvelopCostLimitProtection(config), new EnvelopMaxDepthProtection(config)];
  }

  protect() {
    const plugins = [];

    for (const protection of this.protections) {
      if (protection.isEnabled) {
        const enhancements = protection.protect();
        plugins.push(...enhancements.plugins);
      }
    }

    return {
      plugins
    };
  }

}

exports.ApolloArmor = ApolloArmor;
exports.EnvelopArmor = EnvelopArmor;
exports.EnvelopArmorPlugin = EnvelopArmorPlugin;
